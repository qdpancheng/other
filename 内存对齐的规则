内存对齐的规则：
1）  对于结构的各个成员，第一个成员位于地址偏移为0的位置，以后每个数据成员的地址偏移值必须是min (#pragma pack()指定的数，
这个数据成员的自身长度)的倍数。
2）  在数据成员完成各自对齐之后，结构（或联合）本身也要进行对齐，对齐将按照min(#pragma pack()指定的数值，结构或联合最大数据成员长度)的值
进行。即结构（或联合）的字节空间大小为前面说的min值的倍数。
#pragma pack(n) 表示设置为n字节对齐，这里VC默认8字节对齐。（可以查看VC的默认设置）

栈：在Windows下,栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，
在WINDOWS下，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将 提示overflow。
因此，能从栈获得的空间较小。    
 堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储  的空闲内存地址的，自然是不连续的，而链表的
 遍历方向是由低地址向高地址。堆的大小  受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。
